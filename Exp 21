
    }

}



int main() {

    unsigned char plaintext[] = "This is a plaintext to be encrypted with padding.";

    unsigned char key[] = "secretkey1234567"; 

    unsigned char iv[] = "initializationvec"; 



    int len = strlen((char *)plaintext);

    int padded_len = (len % BLOCK_SIZE == 0) ? len + BLOCK_SIZE : ((len / BLOCK_SIZE) + 1) * BLOCK_SIZE;

    unsigned char padded_plaintext[padded_len];

    memcpy(padded_plaintext, plaintext, len);

    padded_plaintext[len] = 0x80; 

    for (int i = len + 1; i < padded_len; i++) {

        padded_plaintext[i] = 0x00; 

    }



    unsigned char encrypted_ecb[padded_len];

    unsigned char decrypted_ecb[padded_len];

    unsigned char encrypted_cbc[padded_len];

    unsigned char decrypted_cbc[padded_len];

    unsigned char encrypted_cfb[padded_len];

    unsigned char decrypted_cfb[padded_len];

    ecb_encrypt(padded_plaintext, encrypted_ecb, padded_len, key);

    ecb_decrypt(encrypted_ecb, decrypted_ecb, padded_len, key);

    cbc_encrypt(padded_plaintext, encrypted_cbc, padded_len, key, iv);

    cbc_decrypt(encrypted_cbc, decrypted_cbc, padded_len, key, iv);

    cfb_encrypt(padded_plaintext, encrypted_cfb, padded_len, key, iv);

    cfb_decrypt(encrypted_cfb, decrypted_cfb, padded_len, key, iv);

    printf("Original plaintext: %s\n", plaintext);

    printf("ECB encrypted: %s\n", encrypted_ecb);

    printf("ECB decrypted: %s\n", decrypted_ecb);

    printf("CBC encrypted: %s\n", encrypted_cbc);

    printf("CBC decrypted: %s\n", decrypted_cbc);

    printf("CFB encrypted: %s\n", encrypted_cfb);

    printf("CFB decrypted: %s\n", decrypted_cfb);

    

    return 0;

}
